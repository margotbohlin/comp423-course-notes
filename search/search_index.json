{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Margot Bohlin's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li>Primary author: Margot Bohlin</li> <li>Reviewer: Samhitha Pudipeddi</li> </ul>"},{"location":"tutorials/go-setup/#introduction","title":"Introduction","text":"<p>This tutorial will walk you through creating a basic \"Hello World\"-like project in Go. You will set up a Dev Container and use Git to merge/push changes in your code and store your project's collective history.</p>"},{"location":"tutorials/go-setup/#prerequistes","title":"Prerequistes","text":"<p>Before beginning the tutorial, you should have these prerequistes:</p> <ol> <li>GitHub- to track versions of your code</li> <li>Git - to navigate throughout histories of your code and push changes </li> <li>Visual Studio Code - Any text editor will do, but VSCode is MY personal preference</li> <li>Docker - this is where you will set up your Dev Container</li> </ol>"},{"location":"tutorials/go-setup/#getting-started-with-git","title":"Getting Started with Git","text":"<p>You will want to create a new directory for every project you make. Let's call our directory \"hello-go\" because it is your first time using Go. Copy the code below line by line into your terminal to create the directory, move into it, and turn it into a git repository: <pre><code>mkdir hello-go\ncd hello-go\ngit init\n</code></pre> The next step involves creating a file within your workspace to include any additional explanation for your project. We call this file our README <pre><code>echo \"https://margotbohlin.github.io/comp423-course-notes/tutorials/go-setup/\" &gt; README.md\ngit add README.md\ngit commit -m \"Add initial README for Go project\"\n</code></pre> A remote repository is a version of your project stored on a network so that multiple people can review and make changes to it from different locations and computers. Let's turn your local repository into a remote one:</p> <ol> <li>Navigate to the Create a New Repository page on GitHub</li> <li>Fill in the details as follows:<ul> <li>Repository Name: hello-go</li> <li>Description: \"Following a Go tutorial.\"</li> <li>Visibility: Public</li> </ul> </li> <li>Create Repository</li> <li>Make your GitHub repository remote: <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/hello-go.git\n</code></pre></li> </ol> <p>Note</p> <p>Replace  with your github username. <ol> <li>Rename your default branch name to main if it is something different such as \"master\" <pre><code>git branch -M main\n</code></pre></li> <li>Finally, push your local commits into the new repository <pre><code>git push --set-upstream origin main\n</code></pre></li> </ol> <p>Note</p> <p>Origin is used as the name of your remote repository on the line above. You can choose a different name, but origin is the conventional choice.</p>"},{"location":"tutorials/go-setup/#setting-up-devcontainer","title":"Setting Up DevContainer","text":"<ol> <li>Open VSCode and install the Go VSCode Plugin</li> <li>Open your directory in VSCode, it should be called \"hello-go\"</li> <li>Create a <code>.devcontainer</code> directory in the root of your project, and create a file inside with this path name: <code>.devcontainer/devcontainer.json</code></li> <li>Add the following code into the .json file: <pre><code>{\n    \"name\": \"First Go Project\",\n    \"image\": \"mcr.microsoft.com/devcontainers/go:latest\",\n    \"customizations\": {\n        \"vscode\": {\n            \"settings\": {},\n            \"extensions\": [\"golang.go\"]\n        }\n    } \n}\n</code></pre></li> </ol> <p>Info</p> <p><code>name</code> refers to a clear description of the container. <code>image</code> refers to the docker image used which in our case is the latest version of a Go environment. <code>extensions</code>  includes any necessary extensions for our environment</p>"},{"location":"tutorials/go-setup/#additional-steps","title":"Additional Steps","text":"<ol> <li>Reopen your project in a VSCode Dev Container by pressing <code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code> for Macs.</li> <li>Type \"Dev Containers: Reopen in Container,\" and select the option. This may take a while to load, so be patient. </li> <li>Your final step is to check the version of Go your dev container is running to make sure it is up to date. Open a new terminal in VSCode and run <code>go version</code></li> </ol> <p>Success</p> <p>Latest go version as of January 2025 is go version go1.23.4 linux/arm64</p>"},{"location":"tutorials/go-setup/#your-first-go-project","title":"Your First Go Project","text":"<p>To create your first \"hello world\"-like Go project, follow the steps below!</p> <ol> <li>Run the following command in your terminal to initialize a new Go module:</li> </ol> <p><code>go mod init hello_comp423</code></p> <ol> <li> <p>Create a <code>hello.go</code> file in the root directory (<code>hello-go</code>)</p> </li> <li> <p>Add the following code inside the <code>hello.go</code> file</p> </li> </ol> <pre><code>package main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre>"},{"location":"tutorials/go-setup/#running-your-code-option-1","title":"Running your Code (Option 1)","text":"<p>Type the following code into your terminal to see the greeting!</p> <p><code>go run .</code></p>"},{"location":"tutorials/go-setup/#running-using-build-option-2","title":"Running using 'build' (Option 2)","text":"<p>Type the following code into your terminal to use Go's 'build' subcommand:</p> <p><code>go build hello.go</code></p> <p>This should create a file in your current directory where you can execute the binary directly with the following commands:</p> <p><code>./hello</code> for Mac</p> <p><code>hello.exe</code> for Windows </p> <p>Info</p> <p>The build subcommand is similar to the gcc command used to compile C programs into executables (files a computer can run on its operating system). The <code>build</code> subcommand compiles our source code into a binary executable file without executing it. The run subcommand used in option 1 combines building the executable file and running the binary file in the same step.</p>"},{"location":"tutorials/go-setup/#pushing-changes-to-github-repository","title":"Pushing Changes to GitHub Repository","text":"<ol> <li>Add and commit your changes with the following commmands: <pre><code>git add .\ngit commit -m \"Hello COMP423\"\n</code></pre></li> <li>Push the changes to GitHub: <pre><code>git push origin main\n</code></pre></li> </ol> <p>Congratulations! You have now created your first Go project inside of a dev container!</p>"},{"location":"tutorials/go-setup/#citations","title":"Citations","text":"<p>I used the following resources to help me write this tutorial: </p> <ol> <li> <p>COMP423 Git Fundamentals: https://comp423-25s.github.io/resources/git/ch2-git-fundamental-subcommands/#step-1-create-a-directory</p> </li> <li> <p>COMP423 Remote Repositories https://comp423-25s.github.io/resources/git/ch4-git-remote-fetch-push-pull/</p> </li> <li> <p>Go Documentation Tutorial: https://go.dev/doc/tutorial/getting-started</p> </li> </ol>"}]}